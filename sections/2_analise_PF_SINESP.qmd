---
format:
  html:
    theme: solar
    toc: true
    toc-location: left
    toc-depth: 2
    toc-title: "Índice"
    page-layout: full
---

```{r, include=FALSE, echo=FALSE}
knitr::opts_chunk$set(
  comment = "",
  warning = FALSE,
  message = FALSE,
  echo = FALSE
)

library(dplyr)
library(highcharter)
library(lubridate)
```

# Análise das apreensões realizadas pela policia federal

## Sobre os dados

Os dados são referentes as apreenções de drogas feitas pela Polícia Federal e foram obtidos através do Observatório Brasileiro de Informações sobre Drogas (OBID), [obid/seguranca-publica](https://www.gov.br/mj/pt-br/assuntos/sua-protecao/politicas-sobre-drogas/obid/seguranca-publica), vinculado ao Ministério da Justiça e Segurança Pública.

Ao total são quatro bases relacionadas as apreenções feitas pela PF, **PF_Apreensoes_Portos_Aeroportos**, **PF_Apreensoes**, **PF_BaseCircunscricao** e **PF_NovasSubstanciasPsicoativas**.

A base **PF_BaseCircunscricao** não será utilizada na análise por se limitar a informações administrativas sobre delegacias. Da mesma forma, a base **PF_NovasSubstanciasPsicoativas** não será utilizada por não conter qualquer informação geográfica que permitisse localizar as apreensões no território nacional.

Após a filtragem por ocorrencias no estado do Espirito Santo, foi verificado que a base **PF_Apreensoes_Portos_Aeroportos** se limita a somente apreenções feitas no aeroporto e porto de Vitória, já a base **PF_Apreensoes** se limita a apreenções feitas nas regiões central e litoral, noroeste e nordeste e sul do Espirito Santo.

Separação municipal utilizada na base **PF_Apreensoes**:

-   **Central e litoral**: Afonso Cláudio, Alfredo Chaves, Anchieta, Aracruz, Baixo Guandu, Brejetuba, Cariacica, Colatina, Domingos Martins, Fundão, Guarapari, Ibiraçu, Itaguaçu, Itarana, João Neiva, Laranja da Terra, Linhares, Marechal Floriano, Marilândia, Rio Bananal, Santa Leopoldina, Santa Maria de Jetibá, Santa Teresa, São Roque do Canaã, Serra, Sooretama, Venda Nova do Imigrante, Viana, Vila Velha, Vitória.

-   **Noroeste e Nordeste**: Água Doce do Norte, Águia Branca, Alto Rio Novo, Barra de São Francisco, Boa Esperança, Conceição da Barra, Ecoporanga, Governador Lindenberg, Jaguaré, Mantenópolis, Montanha, Mucurici, Nova Venécia, Pancas, Pedro Canário, Pinheiros, Ponto Belo, São Domingos do Norte, São Gabriel da Palha, São Mateus, Vila Pavão, Vila Valério.

-   **Sul**: Alegre, Apiacá, Atilio Vivacqua, Bom Jesus do Norte, Cachoeiro de Itapemirim, Castelo, Conceição do Castelo, Divino de São Lourenço, Dores do Rio Preto, Guaçuí, Ibatiba, Ibitirama, Iconha, Irupi, Itapemirim, Iúna, Jerônimo Monteiro, Marataízes, Mimoso do Sul, Muniz Freire, Muqui, Piúma, Presidente Kennedy, Rio Novo do Sul, São José do Calçado, Vargem Alta.

Dos municipios com bairros abrangidos pelo Projeto Estado Presente, nove se localizam nas regiões central e litoral, Aracruz, Cariacica, Colatina, Linhares, Serra, Vila Velha, Vitória, um nas regiões noroeste e nordeste, São Mateus, e um na região sul, Cachoeiro de Itapemirim.

## Análise descritiva

### Apreensão de drogas em portos e aeroportos pela Polícia Federal

Breve apresentação da base (primeiras cinco linhas).

```{r}
PF_APA <- read.csv("data-raw/PF_Apreensoes_Portos_Aeroportos.csv", sep =";", header=TRUE, check.names = FALSE) |> janitor::clean_names() |> dplyr::filter(uf == "ES")

PF_APA |> head(n = 5) |> knitr::kable() 
```

```{r}
PF_APA <- PF_APA |> 
  mutate(
    data = lubridate::mdy(data),  
    ano = lubridate::year(data)  
  )
```

```{r}
df_freq <- PF_APA |>
  count(origem, ano) |> 
  filter(!is.na(origem))

highchart() |>
  hc_add_series(
    data = df_freq,
    type = "column",
    hcaes(x = ano, y = n, group = origem)
  ) |>
  hc_xAxis(title = list(text = "Ano"), categories = unique(df_freq$ano)) |>
  hc_yAxis(title = list(text = "Número de Apreensões")) |>
  hc_title(text = "Frequência Anual de Apreensões de Drogas por Origem") |>
  hc_subtitle(text = "Dados Polícia Federal Portos e Aeroportos") |>
  hc_tooltip(
    shared = TRUE,
    headerFormat = "<b>Ano: {point.key}</b><br/>",
    pointFormat = "{series.name}: {point.y} </b><br/>"
  ) |>
  hc_legend(enabled = TRUE) |>
  hc_plotOptions(
    column = list(
      stacking = "normal",
      dataLabels = list(enabled = FALSE)
    )
  ) |>
  hc_colors(viridis::viridis(4))
```

```{r}
df_freq <- PF_APA |>
  count(droga, ano) |> 
  filter(!is.na(droga))

highchart() |>
  hc_add_series(
    data = df_freq,
    type = "column",
    hcaes(x = ano, y = n, group = droga)
  ) |>
  hc_xAxis(title = list(text = "Ano"), categories = unique(df_freq$ano)) |>
  hc_yAxis(title = list(text = "Número de Apreensões")) |>
  hc_title(text = "Frequência Anual de Apreensões de Drogas por tipo de Droga") |>
  hc_subtitle(text = "Dados Polícia Federal Portos e Aeroportos") |>
  hc_tooltip(
    shared = TRUE,
    headerFormat = "<b>Ano: {point.key}</b><br/>",
    pointFormat = "{series.name}: {point.y} </b><br/>"
  ) |>
  hc_legend(enabled = TRUE) |>
  hc_plotOptions(
    column = list(
      stacking = "normal",
      dataLabels = list(enabled = FALSE)
    )
  ) |>
  hc_colors(viridis::viridis(4))
```

```{r}
dados_anual <- PF_APA |>
  mutate(
    quantidade = as.numeric(quantidade),
    data = as.Date(data),
    ano = year(data)  # Extrai apenas o ano da data
  ) |>
  filter(!is.na(quantidade), 
         !is.na(ano), 
         !is.na(droga),
         quantidade > 0) |>
  group_by(ano, droga) |>  # Agrupa por ano e tipo de droga
  summarise(total_apreendido = sum(quantidade), .groups = "drop")

highchart() |>
  hc_add_series(
    data = dados_anual,
    type = "line",
    hcaes(x = ano, y = total_apreendido, group = droga),
    marker = list(radius = 4)                            
  ) |>
  hc_xAxis(
    title = list(text = "Ano"),
    allowDecimals = FALSE,  # Remove decimais nos anos
    gridLineWidth = 1
  ) |>
  hc_yAxis(
    title = list(text = "Quantidade Apreendida (gramas)"),
    labels = list(format = "{value:,.0f}"),
    min = 0
  ) |>
  hc_title(text = "Apreensões Anuais de Drogas por tipo de Droga") |>
  hc_subtitle(text = "Dados Polícia Federal Portos e Aeroportos") |>
  hc_tooltip(
    headerFormat = "<b>Ano: {point.x}</b><br>",
    pointFormat = "{series.name}: <b>{point.y:,.0f} gramas</b>",
    shared = FALSE
  ) |>
  hc_legend(
    align = "right",
    verticalAlign = "top",
    layout = "vertical"
  ) |>
  hc_colors(viridis::viridis(length(unique(dados_anual$droga))))
```

### Apreensões de drogas pela Polícias Federal

Breve apresentação da base (primeiras cinco linhas).

```{r}
PF_A <- read.csv("data-raw/PF_Apreensoes.csv", sep =";", header=TRUE, check.names = FALSE) |> janitor::clean_names() |> dplyr::filter(uf == "ES")

PF_A[PF_A$municipios == "Afonso Cláudio, Alfredo Chaves, Anchieta, Aracruz, Baixo Guandu, Brejetuba, Cariacica, Colatina, Domingos Martins, Fundão, Guarapari, Ibiraçu, Itaguaçu, Itarana, João Neiva, Laranja da Terra, Linhares, Marechal Floriano, Marilândia, Rio Bananal, Santa Leopoldina, Santa Maria de Jetibá, Santa Teresa, São Roque do Canaã, Serra, Sooretama, Venda Nova do Imigrante, Viana, Vila Velha, Vitória", ]$municipios <- "Central e litoral"

PF_A[PF_A$municipios == "Água Doce do Norte, Águia Branca, Alto Rio Novo, Barra de São Francisco, Boa Esperança, Conceição da Barra, Ecoporanga, Governador Lindenberg, Jaguaré, Mantenópolis, Montanha, Mucurici, Nova Venécia, Pancas, Pedro Canário, Pinheiros, Ponto Belo, São Domingos do Norte, São Gabriel da Palha, São Mateus, Vila Pavão, Vila Valério", ]$municipios <- "Noroeste e Nordeste"

PF_A[PF_A$municipios == "Alegre, Apiacá, Atilio Vivacqua, Bom Jesus do Norte, Cachoeiro de Itapemirim, Castelo, Conceição do Castelo, Divino de São Lourenço, Dores do Rio Preto, Guaçuí, Ibatiba, Ibitirama, Iconha, Irupi, Itapemirim, Iúna, Jerônimo Monteiro, Marataízes, Mimoso do Sul, Muniz Freire, Muqui, Piúma, Presidente Kennedy, Rio Novo do Sul, São José do Calçado, Vargem Alta", ]$municipios <- "Sul"

PF_A <- PF_A |> rename(regiao_es = municipios)

PF_A |> head(n = 5) |> knitr::kable()
```

```{r}
PF_A$data <- lubridate::ymd_hms(PF_A$data) |> as.Date()

PF_A <- PF_A |> 
  mutate(
    ano = lubridate::year(data)  
  )
```

```{r}
df_freq <- PF_A |>
  # filter(unidade == "Gramas") |>
  count(item, ano) |> 
  filter(!is.na(item))

highchart() |>
  hc_add_series(
    data = df_freq,
    type = "column",
    hcaes(x = ano, y = n, group = item)
  ) |>
  hc_xAxis(title = list(text = "Ano"), categories = unique(df_freq$ano)) |>
  hc_yAxis(title = list(text = "Número de Apreensões")) |>
  hc_title(text = "Frequência Anual de Apreensões de Drogas por Item") |>
  hc_subtitle(text = "Dados Polícia Federal") |>
  hc_tooltip(
    shared = TRUE,
    headerFormat = "<b>Ano: {point.key}</b><br/>",
    pointFormat = "{series.name}: {point.y} </b><br/>"
  ) |>
  hc_legend(enabled = TRUE) |>
  hc_plotOptions(
    column = list(
      stacking = "normal",
      dataLabels = list(enabled = FALSE)
    )
  ) |>
  hc_colors(viridis::viridis(8))
```

```{r}
dados_grafico <- PF_A |>
  filter(unidade == "Gramas") |> 
  mutate(
    quantidade = as.numeric(quantidade),
    ano = as.numeric(ano)
  ) |>
  filter(!is.na(quantidade), !is.na(ano), !is.na(item), quantidade > 0) |> 
  group_by(ano, item) |>
  summarise(total_apreendido = sum(quantidade), .groups = "drop")

# Criar gráfico
highchart() |>
  hc_add_series(
    data = dados_grafico,
    type = "line",
    hcaes(x = ano, y = total_apreendido, group = item),
    marker = list(
      radius = 4,
      symbol = "circle",
      lineWidth = 1
    )                            
  ) |>
  hc_xAxis(
    title = list(text = "Ano"),
    allowDecimals = FALSE,  # Evita decimais nos anos
    labels = list(
      formatter = JS("function() { return this.value; }")  # Mostra anos inteiros
    )
  ) |>
  hc_yAxis(
    title = list(text = "Quantidade Apreendida (gramas)"),
    labels = list(format = "{value:,.0f}"),
    min = 0  # Eixo Y começa em zero
  ) |>
  hc_title(text = "Quantidade anual de apreensões de Drogas por Item") |>
  hc_subtitle(text = "Dados Polícia Federal") |>
  hc_tooltip(
    headerFormat = "<b>Ano: {point.x}</b><br>",
    pointFormat = "<span style=\"color:{point.color}\">●</span> {series.name}: <b>{point.y:,.0f} g</b>",
    shared = FALSE,
    crosshairs = TRUE,
    valueDecimals = 0
  ) |>
  hc_legend(
    align = "right",
    verticalAlign = "middle",
    layout = "vertical",
    itemStyle = list(fontWeight = "normal")
  ) |>
  hc_plotOptions(
    line = list(
      lineWidth = 3,
      states = list(
        hover = list(lineWidthPlus = 2)
    )
  )) |>
  hc_colors(viridis::viridis(length(unique(dados_grafico$item)), option = "D"))
```

```{r}
dados_anual <- PF_A |>
  mutate(
    quantidade = as.numeric(quantidade),
    ano = year(as.Date(data)) 
  ) |>
  filter(!is.na(quantidade), quantidade > 0) |> 
  group_by(ano) |>
  summarise(
    total_gramas = sum(quantidade, na.rm = TRUE), 
    .groups = "drop"
  ) 
highchart() |>
  hc_add_series(
    data = dados_anual,
    type = "line", 
    hcaes(x = ano, y = total_gramas),
    name = "Total Apreendido",
    showInLegend = TRUE,
    marker = list(
      enabled = TRUE,
      radius = 4
    ),
    lineWidth = 3,
    color = "#4285F4"
  ) |>
  hc_xAxis(
    title = list(text = "Ano"),
    allowDecimals = FALSE,
    gridLineWidth = 1
  ) |>
  hc_yAxis(
    title = list(text = "Peso Total Apreendido (gramas)"),
    labels = list(format = "{value:,.0f}"),
    min = 0
  ) |>
  hc_title(text = "Quantidade anual de apreensões de Drogas") |>
  hc_subtitle(text = "Dados Polícia Federal") |>
  hc_tooltip(
    headerFormat = "<b>Ano: {point.x}</b><br>",
    pointFormat = "Total apreendido: <b>{point.y:,.0f} gramas</b>",
    shared = FALSE
  )
```


# Análise das apreensões realizadas pelas policias estaduais

## Sobre os dados

Os dados são referentes as apreenções de drogas feitas pelas polícias estaduais e foram obtidos através do Observatório Brasileiro de Informações sobre Drogas (OBID), [obid/seguranca-publica](https://www.gov.br/mj/pt-br/assuntos/sua-protecao/politicas-sobre-drogas/obid/seguranca-publica), vinculado ao Ministério da Justiça e Segurança Pública.

Embora a base de dados contenha registros a partir de 2016, as variáveis de interesse 'total' e 'peso_total' apresentam valores exclusivamente disponíveis a partir de 2018. Os registros dos anos de 2016 e 2017 para essas métricas específicas consistem inteiramente em valores NA, indicando ausência de dados mensuráveis nesse período inicial.

## Análise descritiva

### Apreensões de drogas pelas polícias estaduais

Breve apresentação da base (primeiras cinco linhas).

```{r}
SINESP <- read.csv("data-raw/SINESP_Apreensoes.csv", sep =";", header=TRUE, check.names = FALSE) |> janitor::clean_names() |> dplyr::filter(uf == "ES") |> filter(ano > 2017)

SINESP <- SINESP |>
  mutate(across(where(is.character), 
                ~iconv(., from = "latin1", to = "UTF-8"))) |>
  mutate(across(where(is.character),
                ~gsub("�", "Ã", .)))  # Replace remaining corrupted chars

SINESP <- SINESP |>
  mutate(
    municipio = gsub("N�O INFORMADO", "NÃO INFORMADO", municipio),
    evento = gsub("Tr�fico", "Tráfico", evento),
    formulario = gsub("Formul�rio", "Formulário", formulario)
  )

SINESP$data_referencia <- lubridate::dmy(SINESP$data_referencia) |> as.Date()


# municipios_estado_presente <- c("Aracruz", "Cariacica", "Cachoeiro de Itapemirim","Colatina", "Linhares", "São Mateus", "Serra","Vila Velha", "Vitória")

SINESP |> head(n = 5) |> knitr::kable()
```

```{r}
dados_grafico <- SINESP |>
  filter(!is.na(total_peso), !is.na(data_referencia), !is.na(evento)) |> 
  mutate(
    total_peso = as.numeric(total_peso),
    data_referencia = as.Date(data_referencia)                
  ) |>
  group_by(data_referencia, evento) |>
  summarise(total_apreendido = sum(total_peso), .groups = "drop")

highchart() |>
  hc_add_series(
    data = dados_grafico,
    type = "line",
    hcaes(x = data_referencia, y = total_apreendido, group = evento),
    marker = list(radius = 4)                            
  ) |>
  hc_xAxis(
    type = "datetime",
    title = list(text = "Data da Apreensão"),
    labels = list(format = "{value:%d/%m/%Y}")
  ) |>
  hc_yAxis(
    title = list(text = "Total peso"),
    labels = list(format = "{value:,.0f}")
  ) |>
  hc_title(text = "Total peso mensal de Drogas Apreendidas") |>
  hc_subtitle(text = "Dados polícia estadual do Espirito Santo") |>
  hc_tooltip(
    headerFormat = "<b>Data: {point.x:%d/%m/%Y}</b><br>",
    pointFormat = "{series.name}: <b>{point.y:,.0f} </b>",
    shared = FALSE,
    crosshairs = TRUE
  ) |>
  hc_legend(
    align = "right",
    verticalAlign = "top",
    layout = "vertical"
  ) |>
  hc_plotOptions(
    line = list(
      colorByPoint = FALSE,
      lineWidth = 3,
      states = list(hover = list(lineWidthPlus = 1))
    )
  ) |>
  hc_colors(viridis::viridis(4))
```
```{r}
dados_grafico <- SINESP |>
  filter(!is.na(total), !is.na(data_referencia), !is.na(evento)) |> 
  mutate(
    total_peso = as.numeric(total),
    data_referencia = as.Date(data_referencia)                
  ) |>
  group_by(data_referencia, evento) |>
  summarise(total_apreendido = sum(total), .groups = "drop")

highchart() |>
  hc_add_series(
    data = dados_grafico,
    type = "line",
    hcaes(x = data_referencia, y = total_apreendido, group = evento),
    marker = list(radius = 4)                            
  ) |>
  hc_xAxis(
    type = "datetime",
    title = list(text = "Data da Apreensão"),
    labels = list(format = "{value:%d/%m/%Y}")
  ) |>
  hc_yAxis(
    title = list(text = "Total"),
    labels = list(format = "{value:,.0f}")
  ) |>
  hc_title(text = "Total mensal de Drogas Apreendidas") |>
  hc_subtitle(text = "Dados polícia estadual do Espirito Santo") |>
  hc_tooltip(
    headerFormat = "<b>Data: {point.x:%d/%m/%Y}</b><br>",
    pointFormat = "{series.name}: <b>{point.y:,.0f} </b>",
    shared = FALSE,
    crosshairs = TRUE
  ) |>
  hc_legend(
    align = "right",
    verticalAlign = "top",
    layout = "vertical"
  ) |>
  hc_plotOptions(
    line = list(
      colorByPoint = FALSE,
      lineWidth = 3,
      states = list(hover = list(lineWidthPlus = 1))
    )
  ) |>
  hc_colors(viridis::viridis(4)[3])
```

