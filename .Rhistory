install.packages("googledrive")
library(googledrive)
id_bases <- c("1VWx1zF-lE54Acw2ggN9vtniWmZ-rUcwo")
nomes_bases <- c("cigarro")
for (i in 1:length(ids_bases)){
drive_download(
as_id(ids_bases[i]),
path = paste0("data-raw/", nomes_bases[i]),
overwrite = TRUE
)
}
ids_bases <- c("1VWx1zF-lE54Acw2ggN9vtniWmZ-rUcwo")
nomes_bases <- c("cigarro")
for (i in 1:length(ids_bases)){
drive_download(
as_id(ids_bases[i]),
path = paste0("data-raw/", nomes_bases[i]),
overwrite = TRUE
)
}
ids_bases <- c("1VWx1zF-lE54Acw2ggN9vtniWmZ-rUcwo")
nomes_bases <- c("cigarro")
for (i in 1:length(ids_bases)){
drive_download(
as_id(ids_bases[i]),
path = paste0("data-raw/", nomes_bases[i]),
overwrite = TRUE
)
}
for (i in 1:length(ids_bases)){
drive_download(
as_id(ids_bases[i]),
path = paste0("data-raw/", nomes_bases[i]),
overwrite = TRUE
)
}
# Leitura com fread (mais rápido e direto)
prf_apreensoes <- fread("PRF_Apreensoes.csv")
library(data.table)
library(stringr)
library(lubridate)
library(hms)
# Leitura com fread (mais rápido e direto)
prf_apreensoes <- fread("PRF_Apreensoes.csv")
prf_apreensoes <- fread("data-raw/PRF_Apreensoes.csv")
# Leitura com fread (mais rápido e direto)
prf_apreensoes <- fread("data-raw/PRF_apreensoes_comp.csv")
prf_cigarro    <- fread("data-raw/PRF_ApreensoesCigarro.csv")
prf_vape       <- fread("data-raw/PRF_ApreensoesVape.csv")
# Função de limpeza básica
limpeza_basica_dt <- function(dt) {
setnames(dt, tolower(gsub("[^[:alnum:]_]", "_", names(dt))))  # nomes em snake_case
char_cols <- names(dt)[sapply(dt, is.character)]
for (col in char_cols) {
dt[, (col) := str_squish(get(col))]  # remove espaços extras
}
unique(dt)[complete.cases(dt)]  # remove duplicatas e linhas com todos NA
}
# Limpeza
prf_apreensoes1 <- limpeza_basica_dt(prf_apreensoes)
prf_cigarro1    <- limpeza_basica_dt(prf_cigarro)
prf_vape1    <- limpeza_basica_dt(prf_vape)
View(prf_apreensoes1)
prf_apreensoes <- fread("data-raw/PRF_apreensoes_comp.csv")
prf_cigarro    <- fread("data-raw/PRF_ApreensoesCigarro.csv")
prf_vape       <- fread("data-raw/PRF_ApreensoesVape.csv")
## Conversão de tipos - PRF Apreensoes
prf_apreensoes[, c("tipo_apreensao", "grupo_apreensao", "tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado", "unidade_padronizada") :=
lapply(.SD, as.factor),
.SDcols = c("tipo_apreensao", "grupo_apreensao", "tipo_local_ocorrencia",
"zona_ocorrencia", "municipio_ocorrencia", "uf",
"estado", "unidade_padronizada")]
View(prf_apreensoes)
prf_apreensoes <- fread("data-raw/PRF_apreensoes_comp.csv")[uf == "ES"]
prf_apreensoes <- fread("data-raw/PRF_apreensoes_comp.csv") |> clean_names()
library(janitor)
prf_apreensoes <- fread("data-raw/PRF_apreensoes_comp.csv") |> clean_names()
prf_apreensoes <- fread("data-raw/PRF_apreensoes_comp.csv") |> clean_names()
prf_cigarro    <- fread("data-raw/PRF_ApreensoesCigarro.csv") |> clean_names()
prf_vape       <- fread("data-raw/PRF_ApreensoesVape.csv") |> clean_names()
View(prf_apreensoes)
View(prf_cigarro)
prf_cigarro    <- fread("data-raw/PRF_ApreensoesCigarro.csv")
View(prf_cigarro)
prf_vape       <- fread("data-raw/PRF_ApreensoesVape.csv") |> clean_names()
View(prf_vape)
View(prf_apreensoes)
prf_apreensoes <- fread("data-raw/PRF_apreensoes_comp.csv") |> clean_names()
View(prf_apreensoes)
names(prf_apreensoes)
# Conversão para fatores (variáveis categóricas)
prf_apreensoes[, c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado",
"unidade_padronizada") :=
lapply(.SD, as.factor),
.SDcols = c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado",
"unidade_padronizada")]
View(prf_apreensoes)
# Conversão para fatores (variáveis categóricas)
prf_apreensoes[, c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado") :=
lapply(.SD, as.factor),
# Conversão para fatores (variáveis categóricas)
prf_apreensoes[, c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado") :=
lapply(.SD, as.factor),
.SDcols = c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado")]
))
# Conversão para fatores (variáveis categóricas)
prf_apreensoes[, c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado") :=
lapply(.SD, as.factor),
.SDcols = c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado")]
# Conversão para data
prf_apreensoes[, c("data_apreensao", "data_ocorrencia", "data_fato") :=
lapply(.SD, as.Date),
.SDcols = c("data_apreensao", "data_ocorrencia", "data_fato")]
# Conversão para numérico
prf_apreensoes[, c("quantidade_item", "quantidade_pessoas_detidas",
"latitude", "longitude") :=
lapply(.SD, as.numeric),
.SDcols = c("quantidade_item", "quantidade_pessoas_detidas",
"latitude", "longitude")]
prf_apreensoes <- fread("data-raw/PRF_apreensoes_comp.csv") |> clean_names()
unique(prf_apreensoes$latitude)
unique(prf_apreensoes$longitude)
# Conversão para fatores (variáveis categóricas)
prf_apreensoes[, c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado") :=
lapply(.SD, as.factor),
.SDcols = c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado")]
# Conversão para numérico
prf_apreensoes[, c("quantidade_item", "quantidade_pessoas_detidas") :=
lapply(.SD, as.numeric),
.SDcols = c("quantidade_item", "quantidade_pessoas_detidas")]
# Substituir vírgula por ponto
prf_apreensoes[, longitude := gsub(",", ".", longitude)]
prf_apreensoes[, latitude := gsub(",", ".", latitude)]
# Converter para numérico
prf_apreensoes[, longitude := as.numeric(longitude)]
prf_apreensoes[, latitude := as.numeric(latitude)]
View(prf_apreensoes)
# Conversão para data
prf_apreensoes[, c("data_apreensao", "data_ocorrencia", "data_fato") :=
lapply(.SD, as.Date),
.SDcols = c("data_apreensao", "data_ocorrencia", "data_fato")]
# Conversão para data
prf_apreensoes[, c("data_apreensao", "data_ocorrencia", "data_fato") :=
lapply(.SD, as.Date),
.SDcols = c("data_apreensao", "data_ocorrencia", "data_fato")]
# Conversão para data
prf_apreensoes[, c("data_apreensao", "data_ocorrencia", "data_fato") :=
lapply(.SD, function(x) as.Date(x, format = "%d/%m/%Y")),
.SDcols = c("data_apreensao", "data_ocorrencia", "data_fato")]
# Conversão para hora (hora_apreensao como string padrão HH:MM:SS)
prf_apreensoes[, hora_apreensao := hms::as_hms(hora_apreensao)]
View(prf_apreensoes)
prf_apreensoes <- fread("data-raw/PRF_apreensoes_comp.csv") |> clean_names()
#prf_cigarro    <- fread("data-raw/PRF_ApreensoesCigarro.csv") |> clean_names()
#prf_vape       <- fread("data-raw/PRF_ApreensoesVape.csv") |> clean_names()
# Conversão para fatores (variáveis categóricas)
prf_apreensoes[, c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado") :=
lapply(.SD, as.factor),
.SDcols = c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado")]
# Conversão para numérico
prf_apreensoes[, c("quantidade_item", "quantidade_pessoas_detidas") :=
lapply(.SD, as.numeric),
.SDcols = c("quantidade_item", "quantidade_pessoas_detidas")]
# Substituir vírgula por ponto
prf_apreensoes[, longitude := gsub(",", ".", longitude)]
prf_apreensoes[, latitude := gsub(",", ".", latitude)]
# Converter para numérico
prf_apreensoes[, longitude := as.numeric(longitude)]
prf_apreensoes[, latitude := as.numeric(latitude)]
head(prf_apreensoes[, .(data_apreensao, data_ocorrencia, data_fato)])
View(prf_apreensoes)
# Filtrar somente registros do ES
prf_apreensoes <- prf_apreensoes[uf == "ES"]
View(prf_apreensoes)
unique(prf_apreensoes$uf)
prf_apreensoes <- fread("data-raw/PRF_apreensoes_comp.csv") |> clean_names()
# Filtrar somente registros do ES
prf_apreensoes <- prf_apreensoes[uf == "ES"]
unique(prf_apreensoes$uf)
# Conversão para fatores (variáveis categóricas)
prf_apreensoes[, c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado") :=
lapply(.SD, as.factor),
.SDcols = c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado")]
# Conversão para numérico
prf_apreensoes[, c("quantidade_item", "quantidade_pessoas_detidas") :=
lapply(.SD, as.numeric),
.SDcols = c("quantidade_item", "quantidade_pessoas_detidas")]
# Substituir vírgula por ponto
prf_apreensoes[, longitude := gsub(",", ".", longitude)]
prf_apreensoes[, latitude := gsub(",", ".", latitude)]
# Converter para numérico
prf_apreensoes[, longitude := as.numeric(longitude)]
prf_apreensoes[, latitude := as.numeric(latitude)]
View(prf_apreensoes)
prf_apreensoes$data_apreensao
unique(prf_apreensoes$tipo_local_ocorrencia)
unique(prf_apreensoes$estado)
# Conversão para fatores (variáveis categóricas)
prf_apreensoes[, c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado") :=
lapply(.SD, as.factor),
.SDcols = c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado")]
# Conversão para numérico
prf_apreensoes[, c("quantidade_item", "quantidade_pessoas_detidas") :=
lapply(.SD, as.numeric),
.SDcols = c("quantidade_item", "quantidade_pessoas_detidas")]
# Substituir vírgula por ponto
prf_apreensoes[, longitude := gsub(",", ".", longitude)]
prf_apreensoes[, latitude := gsub(",", ".", latitude)]
# Converter para numérico
prf_apreensoes[, longitude := as.numeric(longitude)]
prf_apreensoes[, latitude := as.numeric(latitude)]
library(lubridate)
prf_apreensoes[, data_apreensao := parse_date_time(data_apreensao, orders = c("dmy", "ymd"))]
prf_apreensoes[, data_ocorrencia := parse_date_time(data_ocorrencia, orders = c("dmy", "ymd"))]
prf_apreensoes[, data_fato := parse_date_time(data_fato, orders = c("dmy", "ymd"))]
prf_apreensoes[!is.na(data_ocorrencia) & !grepl("^\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}$", data_ocorrencia)][1:10]
prf_apreensoes_raw <- fread("data-raw/PRF_apreensoes_comp.csv", showProgress = FALSE)
str(prf_apreensoes_raw$data_ocorrencia)
prf_apreensoes_raw <- fread("data-raw/PRF_apreensoes_comp.csv", encoding = "Latin1")
prf_apreensoes_raw <- fread("data-raw/PRF_apreensoes_comp.csv", encoding = "Latin-1")
View(prf_apreensoes_raw)
unique(prf_apreensoes_raw$data_ocorrencia)
names(prf_apreensoes_raw)
library(janitor)
prf_apreensoes <- prf_apreensoes_raw |> clean_names()
# Agora os nomes são: data_ocorrencia, data_fato, data_apreensao
prf_apreensoes[, data_ocorrencia := parse_date_time(data_ocorrencia, orders = c("dmy", "ymd"))]
prf_apreensoes[, data_fato := parse_date_time(data_fato, orders = c("dmy", "ymd"))]
prf_apreensoes[, data_apreensao := parse_date_time(data_apreensao, orders = c("dmy", "ymd"))]
