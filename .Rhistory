prf_apreensoes[, c("quantidade_item", "quantidade_pessoas_detidas",
"latitude", "longitude") :=
lapply(.SD, as.numeric),
.SDcols = c("quantidade_item", "quantidade_pessoas_detidas",
"latitude", "longitude")]
prf_apreensoes <- fread("data-raw/PRF_apreensoes_comp.csv") |> clean_names()
unique(prf_apreensoes$latitude)
unique(prf_apreensoes$longitude)
# Conversão para fatores (variáveis categóricas)
prf_apreensoes[, c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado") :=
lapply(.SD, as.factor),
.SDcols = c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado")]
# Conversão para numérico
prf_apreensoes[, c("quantidade_item", "quantidade_pessoas_detidas") :=
lapply(.SD, as.numeric),
.SDcols = c("quantidade_item", "quantidade_pessoas_detidas")]
# Substituir vírgula por ponto
prf_apreensoes[, longitude := gsub(",", ".", longitude)]
prf_apreensoes[, latitude := gsub(",", ".", latitude)]
# Converter para numérico
prf_apreensoes[, longitude := as.numeric(longitude)]
prf_apreensoes[, latitude := as.numeric(latitude)]
View(prf_apreensoes)
# Conversão para data
prf_apreensoes[, c("data_apreensao", "data_ocorrencia", "data_fato") :=
lapply(.SD, as.Date),
.SDcols = c("data_apreensao", "data_ocorrencia", "data_fato")]
# Conversão para data
prf_apreensoes[, c("data_apreensao", "data_ocorrencia", "data_fato") :=
lapply(.SD, as.Date),
.SDcols = c("data_apreensao", "data_ocorrencia", "data_fato")]
# Conversão para data
prf_apreensoes[, c("data_apreensao", "data_ocorrencia", "data_fato") :=
lapply(.SD, function(x) as.Date(x, format = "%d/%m/%Y")),
.SDcols = c("data_apreensao", "data_ocorrencia", "data_fato")]
# Conversão para hora (hora_apreensao como string padrão HH:MM:SS)
prf_apreensoes[, hora_apreensao := hms::as_hms(hora_apreensao)]
View(prf_apreensoes)
prf_apreensoes <- fread("data-raw/PRF_apreensoes_comp.csv") |> clean_names()
#prf_cigarro    <- fread("data-raw/PRF_ApreensoesCigarro.csv") |> clean_names()
#prf_vape       <- fread("data-raw/PRF_ApreensoesVape.csv") |> clean_names()
# Conversão para fatores (variáveis categóricas)
prf_apreensoes[, c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado") :=
lapply(.SD, as.factor),
.SDcols = c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado")]
# Conversão para numérico
prf_apreensoes[, c("quantidade_item", "quantidade_pessoas_detidas") :=
lapply(.SD, as.numeric),
.SDcols = c("quantidade_item", "quantidade_pessoas_detidas")]
# Substituir vírgula por ponto
prf_apreensoes[, longitude := gsub(",", ".", longitude)]
prf_apreensoes[, latitude := gsub(",", ".", latitude)]
# Converter para numérico
prf_apreensoes[, longitude := as.numeric(longitude)]
prf_apreensoes[, latitude := as.numeric(latitude)]
head(prf_apreensoes[, .(data_apreensao, data_ocorrencia, data_fato)])
View(prf_apreensoes)
# Filtrar somente registros do ES
prf_apreensoes <- prf_apreensoes[uf == "ES"]
View(prf_apreensoes)
unique(prf_apreensoes$uf)
prf_apreensoes <- fread("data-raw/PRF_apreensoes_comp.csv") |> clean_names()
# Filtrar somente registros do ES
prf_apreensoes <- prf_apreensoes[uf == "ES"]
unique(prf_apreensoes$uf)
# Conversão para fatores (variáveis categóricas)
prf_apreensoes[, c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado") :=
lapply(.SD, as.factor),
.SDcols = c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado")]
# Conversão para numérico
prf_apreensoes[, c("quantidade_item", "quantidade_pessoas_detidas") :=
lapply(.SD, as.numeric),
.SDcols = c("quantidade_item", "quantidade_pessoas_detidas")]
# Substituir vírgula por ponto
prf_apreensoes[, longitude := gsub(",", ".", longitude)]
prf_apreensoes[, latitude := gsub(",", ".", latitude)]
# Converter para numérico
prf_apreensoes[, longitude := as.numeric(longitude)]
prf_apreensoes[, latitude := as.numeric(latitude)]
View(prf_apreensoes)
prf_apreensoes$data_apreensao
unique(prf_apreensoes$tipo_local_ocorrencia)
unique(prf_apreensoes$estado)
# Conversão para fatores (variáveis categóricas)
prf_apreensoes[, c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado") :=
lapply(.SD, as.factor),
.SDcols = c("tipo_apreensao", "grupo_apreensao",
"tipo_local_ocorrencia", "zona_ocorrencia",
"municipio_ocorrencia", "uf", "estado")]
# Conversão para numérico
prf_apreensoes[, c("quantidade_item", "quantidade_pessoas_detidas") :=
lapply(.SD, as.numeric),
.SDcols = c("quantidade_item", "quantidade_pessoas_detidas")]
# Substituir vírgula por ponto
prf_apreensoes[, longitude := gsub(",", ".", longitude)]
prf_apreensoes[, latitude := gsub(",", ".", latitude)]
# Converter para numérico
prf_apreensoes[, longitude := as.numeric(longitude)]
prf_apreensoes[, latitude := as.numeric(latitude)]
library(lubridate)
prf_apreensoes[, data_apreensao := parse_date_time(data_apreensao, orders = c("dmy", "ymd"))]
prf_apreensoes[, data_ocorrencia := parse_date_time(data_ocorrencia, orders = c("dmy", "ymd"))]
prf_apreensoes[, data_fato := parse_date_time(data_fato, orders = c("dmy", "ymd"))]
prf_apreensoes[!is.na(data_ocorrencia) & !grepl("^\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}$", data_ocorrencia)][1:10]
prf_apreensoes_raw <- fread("data-raw/PRF_apreensoes_comp.csv", showProgress = FALSE)
str(prf_apreensoes_raw$data_ocorrencia)
prf_apreensoes_raw <- fread("data-raw/PRF_apreensoes_comp.csv", encoding = "Latin1")
prf_apreensoes_raw <- fread("data-raw/PRF_apreensoes_comp.csv", encoding = "Latin-1")
View(prf_apreensoes_raw)
unique(prf_apreensoes_raw$data_ocorrencia)
names(prf_apreensoes_raw)
library(janitor)
prf_apreensoes <- prf_apreensoes_raw |> clean_names()
# Agora os nomes são: data_ocorrencia, data_fato, data_apreensao
prf_apreensoes[, data_ocorrencia := parse_date_time(data_ocorrencia, orders = c("dmy", "ymd"))]
prf_apreensoes[, data_fato := parse_date_time(data_fato, orders = c("dmy", "ymd"))]
prf_apreensoes[, data_apreensao := parse_date_time(data_apreensao, orders = c("dmy", "ymd"))]
library(leaflet)
library(data.table)
library(ggplot2)
library(spatstat)
library(raster)
library(leaflet.extras)
data <- fread("data/prf_apreensoes.csv")
## Filtragens para as analises apenas do estado presente e
data <- data[uf == "ES"]
data[, (c("uf", "estado")) := NULL]
municipios_estado_presente <- c("ARACRUZ", "CACHOEIRO DE ITAPEMIRIM", "CARIACICA",
"COLATINA", "LINHARES", "SAO MATEUS", "SERRA",
"VILA VELHA", "VITORIA")
data_corte <- as.Date("2017-12-28")
data[, programa := ifelse(data_apreensao >= data_corte, 1, 0)]
data[, ano := year(data_apreensao)]
data[, ano_mes := format(data_apreensao, "%Y-%m")]
data[, tempo := as.numeric(factor(ano_mes))]  # Converte ano_mes em 1, 2, 3...
data[, pos_intervencao := fifelse(
programa == 1,
tempo - min(tempo[programa == 1]),
0
)]
## Criar variável dummy para o Estado Presente
data[,estado_presente := factor(ifelse(municipio_ocorrencia %in% municipios_estado_presente,
"Estado Presente", "Demais municípios"))]
names(data)
# Carregar pacotes necessários
library(sf)
library(tidyverse)
library(viridis)
library(ggspatial)
library(ggthemes)
library(sf)
library(tidyverse)
library(viridis)
library(ggspatial)
# 1. Carregar o shapefile dos bairros
# Substitua "caminho/para/seu/arquivo.shp" pelo caminho real do seu shapefile
shape_bairros <- st_read("data/shapefiles.shp")
# 1. Carregar o shapefile dos bairros
# Substitua "caminho/para/seu/arquivo.shp" pelo caminho real do seu shapefile
shape_bairros <- st_read("data/shapefiles/ES_UF_2024.shp")
# 3. Converter os dados de apreensão para objeto sf (espacial)
# Certifique-se que as colunas de latitude e longitude estão corretas
dados_sf <- st_as_sf(data,
coords = c("longitude", "latitude"),
crs = st_crs(shape_bairros))
# 1. Carregar o shapefile dos bairros
# Substitua "caminho/para/seu/arquivo.shp" pelo caminho real do seu shapefile
shape<- st_read("data/shapefiles/ES_UF_2024.shp")
# 3. Converter os dados de apreensão para objeto sf (espacial)
# Certifique-se que as colunas de latitude e longitude estão corretas
dados_sf <- st_as_sf(data,
coords = c("longitude", "latitude"),
crs = st_crs(shape))
names(data)
# Opção A: Contagem simples
contagem_municipios <- st_join(shape, dados_sf) %>%
group_by(municipio_ocorrencia) %>% # Ajuste para os nomes das colunas no seu shapefile
summarise(total_apreensoes = sum(total_apreensoes, na.rm = TRUE)) %>%
ungroup()
# Verificar coordenadas
summary(dados_apreensao[, c("longitude", "latitude")])
table(data$tipo_local_ocorrencia)
dados_agg <- data[, .(total_registros = .N), by = .(ano_mes, programa)]
# Período DEPOIS do programa
if (dados_agg[programa == 1, .N] > 0) {
mk_depois <- mk.test(dados_agg[programa == 1, total_registros])
cat("\n--- Teste de Mann-Kendall (DEPOIS do programa) ---\n")
print(mk_depois)
} else {
cat("\nNenhum dado disponível no período 'Depois'.\n")
}
library(data.table)
library(trend)
library(dplyr)
library(sandwich)
library(lmtest)
# Período DEPOIS do programa
if (dados_agg[programa == 1, .N] > 0) {
mk_depois <- mk.test(dados_agg[programa == 1, total_registros])
cat("\n--- Teste de Mann-Kendall (DEPOIS do programa) ---\n")
print(mk_depois)
} else {
cat("\nNenhum dado disponível no período 'Depois'.\n")
}
dados_agg[programa == 0, total_registros]
dados_agg[, total_registros]
mk_test <- dados_agg[, total_registros]
mk_test
print(mk_test)
mk_test(dados_agg[, total_registros])
library(trend)
library(dplyr)
library(sandwich)
library(lmtest)
mk_test(dados_agg[, total_registros])
mk.test(dados_agg[, total_registros])
mk.test(dados_agg[programa == 1, total_registros])
## serie do total de todas apreensões
### Extrair ano e mês para agregação
data[, ano_mes := format(data_apreensao, "%Y-%m")]
### Calcular o total de apreensões por mês
dados_mensais <- data[, .(total_apreensoes = .N), by = .(ano_mes)]
### Ordenar por data
setorder(dados_mensais, ano_mes)
### Criar coluna de data completa (primeiro dia do mês) para o gráfico
dados_mensais[, data := as.Date(paste0(ano_mes, "-01"))]
# Converter para série temporal mensal
serie_ts <- ts(dados_mensais$total_apreensoes,
start = c(as.integer(substr(dados_mensais$ano_mes[1], 1, 4)),
as.integer(substr(dados_mensais$ano_mes[1], 6, 7))),
frequency = 12)
# Plotar a série temporal
autoplot(serie_ts) +
ggtitle("Total de Apreensões Mensais") +
xlab("Ano") + ylab("Quantidade") +
theme_minimal()
# Teste de autocorrelação para verificar padrão sazonal
acf(serie_ts, main = "Função de Autocorrelação (ACF)")
# Teste de decomposição sazonal (opcional para visualização)
decomposicao <- stl(serie_ts, s.window = "periodic")
autoplot(decomposicao)
# Teste de Kruskal-Wallis para avaliar diferença entre meses
dados_mensais[, mes := month(data_apreensao, label = TRUE)]
kruskal.test(total_apreensoes ~ mes, data = dados_mensais)
kruskal.test(total_apreensoes ~ ano_mes, data = data)
kruskal.test(total_apreensoes ~ ano_mes, data = dados_mensais)
# Teste de decomposição sazonal (opcional para visualização)
decomposicao <- stl(serie_ts, s.window = "periodic")
autoplot(decomposicao)
library(forecast)
autoplot(decomposicao)
library(lubridate)
# Extrair mês como fator com nome (jan, fev, ...)
dados_mensais[, mes := month(data, label = TRUE, abbr = TRUE)]
# Aplicar o teste de Kruskal-Wallis correto
kruskal.test(total_apreensoes ~ mes, data = dados_mensais)
# Supondo que sua série mensal já esteja ordenada:
serie_ts <- ts(dados_mensais$total_apreensoes,
start = c(year(min(dados_mensais$data)), month(min(dados_mensais$data))),
frequency = 12)
# Instalar o pacote se ainda não tiver
if (!require(seastests)) install.packages("seastests")
library(seastests)
# Aplicar o QS test (ou outros disponíveis no pacote)
qs_result <- qs(serie_ts)
# Ver resultado
qs_result
# Criar a série temporal mensal (caso ainda não tenha feito)
serie_ts <- ts(dados_mensais$total_apreensoes,
start = c(year(min(dados_mensais$data)), month(min(dados_mensais$data))),
frequency = 12)
# Carregar o pacote seastests
if (!require(seastests)) install.packages("seastests")
library(seastests)
# Rodar o teste
ch_result <- ch(serie_ts)
library(seastests)
# Rodar o teste
ch_result <- ch(serie_ts)
if (!require(seasonal)) install.packages("seasonal")
library(seasonal)
modelo <- seas(serie_ts)
summary(modelo)
dados_mensais[programa == 1, total_apreensoes]
dados_mensais[programa == 1, total_apreensoes,]
dados_mensais[programa == 1, total_apreensoes]
View(dados_mensais)
dados_agg <- data[, .(total_registros = .N), by = .(ano_mes, programa)]
View(dados_agg)
dados_agg[programa == 1, total_apreensoes]
dados_agg[programa == 1, total_registroz]
dados_agg[programa == 1, total_registros]
dados_agg[programa == 0, total_registros]
library(data.table)
library(ggplot2)
library(viridis)
library(highcharter)
library(dplyr)
data <- fread("data/prf_apreensoes.csv")
## Filtragens para as analises apenas do estado presente e
data <- data[uf == "ES"]
data[, (c("uf", "estado")) := NULL]
municipios_estado_presente <- c("ARACRUZ", "CACHOEIRO DE ITAPEMIRIM", "CARIACICA", "COLATINA",
"LINHARES", "SAO MATEUS", "SERRA", "VILA VELHA", "VITORIA")
data_corte <- as.Date("2017-12-28")
data[, programa := ifelse(data_apreensao >= data_corte, 1, 0)]
data[, ano := year(data_apreensao)]
data[, ano_mes := format(data_apreensao, "%Y-%m")]
# Criar variável dummy para o Estado Presente
data[,estado_presente := factor(ifelse(municipio_ocorrencia %in% municipios_estado_presente,
"Estado Presente", "Demais municípios"))]
dados_agregados <- data[, .(total = .N), by = .(ano, estado_presente)]
hchart(
dados_agregados,
"column",
hcaes(x = ano, y = total, group = estado_presente),
stacking = "normal"
) %>%
hc_title(text = "Apreensões por Ano no ES") %>%
hc_colors(viridis(2, option = "D")) %>%
hc_xAxis(title = list(text = "Ano")) %>%
hc_yAxis(title = list(text = "Total de Apreensões"))
library(leaflet)
library(data.table)
library(ggplot2)
library(spatstat)
library(raster)
library(leaflet.extras)
library(stringi)
library(dplyr)
data <- fread("data/prf_apreensoes.csv")
## Filtragens para as analises apenas do estado presente e
data <- data[uf == "ES"]
data[, (c("uf", "estado")) := NULL]
municipios_estado_presente <- c("ARACRUZ", "CACHOEIRO DE ITAPEMIRIM", "CARIACICA",
"COLATINA", "LINHARES", "SAO MATEUS", "SERRA",
"VILA VELHA", "VITORIA")
data_corte <- as.Date("2017-12-28")
data[, programa := ifelse(data_apreensao >= data_corte, 1, 0)]
data[, ano := year(data_apreensao)]
data[, ano_mes := format(data_apreensao, "%Y-%m")]
data[, tempo := as.numeric(factor(ano_mes))]  # Converte ano_mes em 1, 2, 3...
data[, pos_intervencao := fifelse(
programa == 1,
tempo - min(tempo[programa == 1]),
0
)]
## Criar variável dummy para o Estado Presente
data[,estado_presente := factor(ifelse(municipio_ocorrencia %in% municipios_estado_presente,
"Estado Presente", "Demais municípios"))]
mun_shp <- st_read("data/shapefiles/ES_Municipios_2024.shp")
library(stringi)
library(dplyr)
library(raster)
library(leaflet.extras)
library(spatstat)
library(ggstats)
library(ggspatial)
mun_shp <- st_read("data/shapefiles/ES_Municipios_2024.shp")
library(sf)
mun_shp <- st_read("data/shapefiles/ES_Municipios_2024.shp")
mun_shp <- st_read("data/shapefiles/ES_Municipios_2024.shp")
# Padronizar nomes do shapefile
mun_shp$NM_MUN_PAD <- toupper(stri_trans_general(mun_shp$NM_MUN, "Latin-ASCII"))
# Padronizar nomes da base de apreensões (apenas por segurança)
apreensoes_mun$municipio_ocorrencia <- toupper(stri_trans_general(apreensoes_mun$municipio_ocorrencia,
"Latin-ASCII"))
mun_shp <- mun_shp |>
left_join(apreensoes_mun, by = c("NM_MUN" = "municipio_ocorrencia"))
# Agregar o total de apreensões por município
apreensoes_mun <- data[, .(total_apreensoes = .N), by = municipio_ocorrencia]
mun_shp <- st_read("data/shapefiles/ES_Municipios_2024.shp")
# Padronizar nomes do shapefile
mun_shp$NM_MUN_PAD <- toupper(stri_trans_general(mun_shp$NM_MUN, "Latin-ASCII"))
# Padronizar nomes da base de apreensões (apenas por segurança)
apreensoes_mun$municipio_ocorrencia <- toupper(stri_trans_general(apreensoes_mun$municipio_ocorrencia,
"Latin-ASCII"))
mun_shp <- mun_shp |>
left_join(apreensoes_mun, by = c("NM_MUN" = "municipio_ocorrencia"))
# Agregar o total de apreensões por município
apreensoes_mun <- data[, .(total_apreensoes = .N), by = municipio_ocorrencia]
mun_shp <- st_read("data/shapefiles/ES_Municipios_2024.shp")
# Padronizar nomes do shapefile
mun_shp$NM_MUN_PAD <- toupper(stri_trans_general(mun_shp$NM_MUN, "Latin-ASCII"))
# Padronizar nomes da base de apreensões (apenas por segurança)
apreensoes_mun$municipio_ocorrencia <- toupper(stri_trans_general(apreensoes_mun$municipio_ocorrencia,
"Latin-ASCII"))
mun_shp <- mun_shp |>
left_join(apreensoes_mun, by = c("NM_MUN" = "municipio_ocorrencia"))
mun_shp$total_apreensoes[is.na(mun_shp$total_apreensoes)] <- 0
# Cria a lista de vizinhança com base na geometria (contiguidade)
vizinhos <- poly2nb(mun_shp)
# Transforma em lista de pesos espaciais (row-standardized)
listw <- nb2listw(vizinhos, style = "W", zero.policy = TRUE)
moran.test(mun_shp$total_apreensoes, listw, zero.policy = TRUE)
library(spdep)
install.packages("spden")
# Agregar o total de apreensões por município
apreensoes_mun <- data[, .(total_apreensoes = .N), by = municipio_ocorrencia]
mun_shp <- st_read("data/shapefiles/ES_Municipios_2024.shp")
# Padronizar nomes do shapefile
mun_shp$NM_MUN_PAD <- toupper(stri_trans_general(mun_shp$NM_MUN, "Latin-ASCII"))
# Padronizar nomes da base de apreensões (apenas por segurança)
apreensoes_mun$municipio_ocorrencia <- toupper(stri_trans_general(apreensoes_mun$municipio_ocorrencia,
"Latin-ASCII"))
mun_shp <- mun_shp |>
left_join(apreensoes_mun, by = c("NM_MUN" = "municipio_ocorrencia"))
mun_shp$total_apreensoes[is.na(mun_shp$total_apreensoes)] <- 0
# Cria a lista de vizinhança com base na geometria (contiguidade)
vizinhos <- poly2nb(mun_shp)
library(spdep)
install.packages("spdep")
library(spdep)
# Agregar o total de apreensões por município
apreensoes_mun <- data[, .(total_apreensoes = .N), by = municipio_ocorrencia]
mun_shp <- st_read("data/shapefiles/ES_Municipios_2024.shp")
# Padronizar nomes do shapefile
mun_shp$NM_MUN_PAD <- toupper(stri_trans_general(mun_shp$NM_MUN, "Latin-ASCII"))
# Padronizar nomes da base de apreensões (apenas por segurança)
apreensoes_mun$municipio_ocorrencia <- toupper(stri_trans_general(apreensoes_mun$municipio_ocorrencia,
"Latin-ASCII"))
mun_shp <- mun_shp |>
left_join(apreensoes_mun, by = c("NM_MUN" = "municipio_ocorrencia"))
mun_shp$total_apreensoes[is.na(mun_shp$total_apreensoes)] <- 0
# Cria a lista de vizinhança com base na geometria (contiguidade)
vizinhos <- poly2nb(mun_shp)
# Transforma em lista de pesos espaciais (row-standardized)
listw <- nb2listw(vizinhos, style = "W", zero.policy = TRUE)
moran.test(mun_shp$total_apreensoes, listw, zero.policy = TRUE)
# Agregar o total de apreensões por município
apreensoes_mun <- data[, .(total_apreensoes = .N), by = municipio_ocorrencia]
mun_shp <- st_read("data/shapefiles/ES_Municipios_2024.shp")
# Padronizar nomes do shapefile
mun_shp$NM_MUN_PAD <- toupper(stri_trans_general(mun_shp$NM_MUN, "Latin-ASCII"))
# Padronizar nomes da base de apreensões (apenas por segurança)
apreensoes_mun$municipio_ocorrencia <- toupper(stri_trans_general(apreensoes_mun$municipio_ocorrencia,
"Latin-ASCII"))
mun_shp <- mun_shp |>
left_join(apreensoes_mun, by = c("NM_MUN" = "municipio_ocorrencia"))
mun_shp$total_apreensoes[is.na(mun_shp$total_apreensoes)] <- 0
# Cria a lista de vizinhança com base na geometria (contiguidade)
vizinhos <- poly2nb(mun_shp)
# Transforma em lista de pesos espaciais (row-standardized)
listw <- nb2listw(vizinhos, style = "W", zero.policy = TRUE)
moran.test(mun_shp$total_apreensoes, listw, zero.policy = TRUE)
mun_shp$total_apreensoes[is.na(mun_shp$total_apreensoes)] <- 0
# Cria a lista de vizinhança com base na geometria (contiguidade)
vizinhos <- poly2nb(mun_shp)
# Transforma em lista de pesos espaciais (row-standardized)
listw <- nb2listw(vizinhos, style = "W", zero.policy = TRUE)
moran.test(mun_shp$total_apreensoes, listw, zero.policy = TRUE)
any(is.na(mun_shp$total_apreensoes))
card(vizinhos)
var(mun_shp$total_apreensoes)
View(mun_shp)
data <- fread("data/prf_apreensoes.csv")
## Filtragens para as analises apenas do estado presente e
data <- data[uf == "ES"]
data[, (c("uf", "estado")) := NULL]
municipios_estado_presente <- c("ARACRUZ", "CACHOEIRO DE ITAPEMIRIM", "CARIACICA",
"COLATINA", "LINHARES", "SAO MATEUS", "SERRA",
"VILA VELHA", "VITORIA")
data_corte <- as.Date("2017-12-28")
data[, programa := ifelse(data_apreensao >= data_corte, 1, 0)]
data[, ano := year(data_apreensao)]
data[, ano_mes := format(data_apreensao, "%Y-%m")]
data[, tempo := as.numeric(factor(ano_mes))]  # Converte ano_mes em 1, 2, 3...
data[, pos_intervencao := fifelse(
programa == 1,
tempo - min(tempo[programa == 1]),
0
)]
## Criar variável dummy para o Estado Presente
data[,estado_presente := factor(ifelse(municipio_ocorrencia %in% municipios_estado_presente,
"Estado Presente", "Demais municípios"))]
# Agregar o total de apreensões por município
apreensoes_mun <- data[, .(total_apreensoes = .N), by = municipio_ocorrencia]
mun_shp <- st_read("data/shapefiles/ES_Municipios_2024.shp")
# Padronizar nomes do shapefile
mun_shp$NM_MUN_PAD <- toupper(stri_trans_general(mun_shp$NM_MUN, "Latin-ASCII"))
# Padronizar nomes da base de apreensões (apenas por segurança)
apreensoes_mun$municipio_ocorrencia <- toupper(stri_trans_general(apreensoes_mun$municipio_ocorrencia,
"Latin-ASCII"))
mun_shp <- mun_shp |>
left_join(apreensoes_mun, by = c("NM_MUN_PAD" = "municipio_ocorrencia"))
table(mun_shp$total_apreensoes)  # Verifique se há zeros e valores positivos
mun_shp$match_status <- ifelse(mun_shp$total_apreensoes == 0, "Sem dados", "Com dados")
table(mun_shp$match_status)
## Inclusão de 0 caso NA
mun_shp$total_apreensoes[is.na(mun_shp$total_apreensoes)] <- 0
# Cria a lista de vizinhança com base na geometria (contiguidade)
vizinhos <- poly2nb(mun_shp)
# Transforma em lista de pesos espaciais (row-standardized)
listw <- nb2listw(vizinhos, style = "W", zero.policy = TRUE)
moran.test(mun_shp$total_apreensoes, listw, zero.policy = TRUE)
list.files("data/shapefiles", pattern = "ES_Municipios_2024", full.names = TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
